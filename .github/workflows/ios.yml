name: iOS CI/CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test iOS App
    runs-on: macos-14  # Ensures compatibility with Xcode 15.3+

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full repository history

      - name: Set Xcode Version
        run: sudo xcode-select -switch /Applications/Xcode_15.3.app/Contents/Developer

      - name: Debug Project Files
        run: |
          echo "Checking project files..."
          ls -la
          if [ ! -d "*.xcodeproj" ] && [ ! -d "*.xcworkspace" ]; then
            echo "Error: No Xcode project or workspace found!"
            exit 1
          fi

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json 2>/dev/null || echo '{}')
          echo "Raw Scheme List: $scheme_list"  # Debugging
          if [ -z "$scheme_list" ] || [ "$scheme_list" = "{}" ]; then
            echo "Error: No schemes found. Ensure your project has shared schemes."
            exit 1
          fi
          default=$(echo "$scheme_list" | ruby -r json -e '
            begin
              data = JSON.parse(STDIN.read)
              puts data.dig("project", "targets", 15.3) || "Unknown"
            rescue JSON::ParserError
              puts "Unknown"
            end
          ')
          if [ "$default" = "Unknown" ]; then
            echo "Error: Failed to parse scheme list."
            exit 1
          fi
          echo "$default" > default
          echo "Using default scheme: $default"

      - name: Select iOS Simulator
        id: select_simulator
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          echo "SIMULATOR_NAME=$device" >> $GITHUB_ENV
          echo "Selected iOS Simulator: $device"

      - name: Determine Xcode Project Type
        id: project_type
        run: |
          if [ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]; then
            echo "PROJECT_TYPE=workspace" >> $GITHUB_ENV
            echo "PROJECT_FILE=$(ls -A | grep -i \\.xcworkspace\$)" >> $GITHUB_ENV
          else
            echo "PROJECT_TYPE=project" >> $GITHUB_ENV
            echo "PROJECT_FILE=$(ls -A | grep -i \\.xcodeproj\$)" >> $GITHUB_ENV
          fi
          echo "Using Project Type: ${{ env.PROJECT_TYPE }}"

      - name: Build App for Testing
        run: |
          scheme=$(cat default)
          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -${{ env.PROJECT_TYPE }} "${{ env.PROJECT_FILE }}" \
            -destination "platform=iOS Simulator,name=${{ env.SIMULATOR_NAME }}" \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty

      - name: Run Tests
        run: |
          scheme=$(cat default)
          xcodebuild test-without-building \
            -scheme "$scheme" \
            -${{ env.PROJECT_TYPE }} "${{ env.PROJECT_FILE }}" \
            -destination "platform=iOS Simulator,name=${{ env.SIMULATOR_NAME }}" \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty
